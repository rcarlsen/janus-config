let g:solarized_termcolors=256
set t_Co=16
set background=dark
colorscheme solarized

if has('gui_running')
  set guioptions-=T  "remove toolbar

  set macligatures
  set guifont=Fira\ Code:h13
  set transparency=5

  set lines=36
  set columns=120

  set shell=/bin/bash
  set nu
end

" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
"map <c-space> ?
map <silent> <leader><cr> :noh<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" Use the arrows to something useful
map <right> :bn<cr>
map <left> :bp<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

" Fast saving
nmap <leader>w :w!<cr>

" Easier moving in tabs and windows
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-L> <C-W>l<C-W>_
map <C-H> <C-W>h<C-W>_
map <C-K> <C-W>k<C-W>_

" Dvorak it!
"no d h
"no h j
"no t k
"no n l
"no s :
"no S :
"no j d
"no l n
"no L N

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

"""""""""""""""
" UltiSnips
"""""""""""""""
" there is a confilct of some sort with using C-Tab here.
let g:UltiSnipsExpandTrigger="<Enter>"
let g:UltiSnipsJumpForwardTrigger="<Enter>"
let g:UltiSnipsJumpBackwardTrigger="<S-Enter>"

" there is a UltiSnips dir in the janus repo
" this creates duplicate snippets...however I want to be able to make
" custom snippets without dirtying the janus dir
let g:UltiSnipsSnippetDirectories = ['UltiSnips-local']


""""""""""""""""
" youcompleteme
""""""""""""""""
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" this list isn't configured correctly...
"let g:ycm_extra_conf_globlist = ['~/.ycm_extra_conf.py','!~/*']
" ...so just disabling the checking.
let g:ycm_confirm_extra_conf = 0

let g:ycm_allow_changing_updatetime = 0
let g:ycm_complete_in_comments = 1

" the built-in <Tab> interferes with UltiSnips, but UtilSnips
" will pass the event forward if no matches are found
let g:ycm_key_list_select_completion = ['<C-Tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-S-Tab>', '<Up>']

"let g:ycm_key_select_completion = "<Enter>"
"
"this is not working with Programmer Dvorak
"let g:ycm_key_invoke_completion = "<c-space>"

" this *does* work with Programmer Dvorak, but is somewhat awkward
let g:ycm_key_invoke_completion = "<s-space>"

" this is the trick to making UltiSnips and YCM work:
let g:SuperTabDefaultCompletionType = '<C-Tab>' 

au BufWritePost *.c,*.cpp,*.h YcmForceCompileAndDiagnostics
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
"autocmd FileType c set omnifunc=ccomplete#Complete

" Syntax omnicomplete for any files without specific plugins
if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
        \	if &omnifunc == "" |
        \		setlocal omnifunc=syntaxcomplete#Complete |
        \	endif
endif

let g:tagbar_ctags_bin = "/usr/local/bin/ctags"

"Ctags {
" This will look in the current directory for 'tags', and work up the tree towards root until one is found. 
"    set tags=./tags;/
"    map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> " C-\ - Open the definition in a new tab
"    map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>      " A-] - Open the definition in a vertical split
"}

" setup a shortcut for generating tags in current buffer's directory
" map <C-F6> :ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"function! SuperCleverTab()
    "if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        "return "\<Tab>"
    "else
        "if &omnifunc != ''
            "return "\<C-X>\<C-O>"
        "elseif &dictionary != ''
            "return "\<C-K>"
        "else
            "return "\<C-N>"
        "endif
    "endif
    "endfunction

"inoremap <Tab> <C-R>=SuperCleverTab()<cr>

"let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabContextDefaultCompletionType = "<c-n>"

"let g:pydiction_location = '~/.janus/janus-python-extras/ftplugin/pydiction/complete-dict'

" enable custom, per-directory configurations
if filereadable(".vim.custom")
    so ".vim.custom"
endif

" vim-arduino configuration
au BufRead,BufNewFile *.pde set filetype=arduino
au BufRead,BufNewFile *.ino set filetype=arduino


